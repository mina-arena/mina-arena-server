type Query {
  game(id: ID!): Game
  games: [Game!]!
  units: [Unit!]!
  player(minaPublicKey: String!): Player
}

type Mutation {
  createGame(input: CreateGameInput!): Game
  createGamePieces(input: CreateGamePiecesInput!): [GamePiece!]
  startGame(input: StartGameInput!): Game
  createGamePieceActions(input: CreateGamePieceActionsInput!): [GamePieceAction!]
}

scalar Iso8601DateTime

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum GamePhaseName {
  MOVEMENT
  SHOOTING
  MELEE
}

enum GamePieceActionType {
  MOVE
  RANGED_ATTACK
  MELEE_ATTACK
}

type Player {
  id: ID!
  name: String!
  minaPublicKey: String!
  playerUnits: [PlayerUnit!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type Game {
  id: ID!
  status: GameStatus!
  arena: GameArena
  turnNumber: Int
  gamePlayers: [GamePlayer!]!
  turnPlayerOrder: [GamePlayer!]!
  turnGamePlayer: GamePlayer
  winningGamePlayer: GamePlayer
  gamePieces: [GamePiece!]!
  gamePhases: [GamePhase!]!
  currentPhase: GamePhase
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePlayer {
  id: ID!
  game: Game!
  player: Player!
  playerNumber: Int!
  gamePhases: [GamePhase!]!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GameArena {
  id: ID!
  game: Game!
  width: Int!
  height: Int!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type Unit {
  id: ID!
  name: String!
  attackPower: Int!
  armor: Int!
  maxHealth: Int!
  movementSpeed: Int!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type PlayerUnit {
  id: ID!
  player: Player!
  unit: Unit!
  name: String!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePiece {
  id: ID!
  game: Game!
  gamePlayer: GamePlayer!
  playerUnit: PlayerUnit!
  coordinates: GamePieceCoordinates
  health: Int!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePieceCoordinates {
  x: Int!
  y: Int!
}

type GamePhase {
  id: ID!
  game: Game!
  gamePlayer: GamePlayer!
  turnNumber: Int!
  name: GamePhaseName!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePieceAction {
  id: ID!
  gamePhase: GamePhase!
  gamePlayer: GamePlayer!
  gamePiece: GamePiece!
  actionType: GamePieceActionType!
  actionData: GamePieceActionData!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

union GamePieceActionData = GamePieceMoveAction | GamePieceRangedAttackAction | GamePieceMeleeAttackAction

type GamePieceMoveAction {
  moveFrom: GamePieceCoordinates!
  moveTo: GamePieceCoordinates!
}

type GamePieceRangedAttackAction {
  targetGamePiece: GamePiece!
}

type GamePieceMeleeAttackAction {
  targetGamePiece: GamePiece!
}

input CreateGameInput {
  arenaWidth: Int!
  arenaHeight: Int!
  players: [CreateGamePlayerInput!]!
}

input CreateGamePlayerInput {
  minaPublicKey: String!
  name: String!
  playerNumber: Int!
}

input CreateGamePiecesInput {
  minaPublicKey: String!
  gameId: ID!
  gamePieces: [CreateGamePieceInput!]!
}

input CreateGamePieceInput {
  playerUnitId: ID
  createPlayerUnit: CreatePlayerUnitInput
}

input CreatePlayerUnitInput {
  unitId: Int!
  name: String!
}

input StartGameInput {
  gameId: ID!
}

input CreateGamePieceActionsInput {
  minaPublicKey: String!
  gameId: ID!
  actions: [CreateGamePieceActionInput!]!
}

input CreateGamePieceActionInput {
  actionType: GamePieceActionType!
  gamePieceId: ID!
  moveInput: GamePieceMoveActionInput
  rangedAttackInput: GamePieceRangedAttackActionInput
  meleeAttackInput: GamePieceMeleeAttackActionInput
}

input GamePieceMoveActionInput {
  moveFrom: GamePieceCoordinatesInput!
  moveTo: GamePieceCoordinatesInput!
}

input GamePieceCoordinatesInput {
  x: Int!
  y: Int!
}

input GamePieceRangedAttackActionInput {
  targetGamePieceId: ID!
}

input GamePieceMeleeAttackActionInput {
  targetGamePieceId: ID!
}
