type Query {
  game(id: ID!): Game
  games: [Game!]!
  units: [Unit!]!
  player(minaPublicKey: String!): Player
}

type Mutation {
  createGame(input: CreateGameInput!): Game
  createGamePieces(input: CreateGamePiecesInput!): [GamePiece!]
  startGame(input: StartGameInput!): Game
  createGamePieceActions(
    input: CreateGamePieceActionsInput!
  ): [GamePieceAction!]
  submitGamePhase(input: SubmitGamePhaseInput!): Game
}

scalar Iso8601DateTime

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum GamePhaseName {
  MOVEMENT
  SHOOTING
  MELEE
}

enum GamePieceActionType {
  MOVE
  RANGED_ATTACK
  MELEE_ATTACK
}

type Player {
  id: Int!
  name: String!
  minaPublicKey: String!
  playerUnits: [PlayerUnit!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type Game {
  id: Int!
  status: GameStatus!
  arena: GameArena
  turnNumber: Int
  gamePlayers: [GamePlayer!]!
  turnPlayerOrder: [GamePlayer!]!
  turnGamePlayer: GamePlayer
  winningGamePlayer: GamePlayer
  gamePieces: [GamePiece!]!
  gamePhases: [GamePhase!]!
  currentPhase: GamePhase
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePlayer {
  id: Int!
  game: Game!
  player: Player!
  playerNumber: Int!
  gamePhases: [GamePhase!]!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GameArena {
  id: Int!
  game: Game!
  width: Int!
  height: Int!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type Unit {
  id: Int!
  name: String!
  maxHealth: Int!
  movementSpeed: Int!
  armorSaveRoll: Int!
  pointsCost: Int!
  meleeNumAttacks: Int!
  meleeHitRoll: Int!
  meleeWoundRoll: Int!
  meleeArmorPiercing: Int!
  meleeDamage: Int!
  rangedRange: Int
  rangedNumAttacks: Int
  rangedHitRoll: Int
  rangedWoundRoll: Int
  rangedArmorPiercing: Int
  rangedDamage: Int
  rangedAmmo: Int
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type PlayerUnit {
  id: Int!
  player: Player!
  unit: Unit!
  name: String!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePiece {
  id: Int!
  game: Game!
  gamePlayer: GamePlayer!
  playerUnit: PlayerUnit!
  coordinates: GamePieceCoordinates
  health: Int!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePieceCoordinates {
  x: Int!
  y: Int!
}

type GamePhase {
  id: Int!
  game: Game!
  gamePlayer: GamePlayer!
  turnNumber: Int!
  name: GamePhaseName!
  gamePieceActions: [GamePieceAction!]!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

type GamePieceAction {
  id: Int!
  gamePhase: GamePhase!
  gamePlayer: GamePlayer!
  gamePiece: GamePiece!
  actionType: GamePieceActionType!
  actionData: GamePieceActionData!
  createdAt: Iso8601DateTime!
  updatedAt: Iso8601DateTime!
}

union GamePieceActionData =
    GamePieceMoveAction
  | GamePieceRangedAttackAction
  | GamePieceMeleeAttackAction

type GamePieceMoveAction {
  moveFrom: GamePieceCoordinates!
  moveTo: GamePieceCoordinates!
  resolved: Boolean!
}

type GamePieceRangedAttackAction {
  targetGamePiece: GamePiece!
  resolved: Boolean!
  resolvedAttacks: [ResolvedAttack!]
  totalDamageDealt: Int
  totalDamageAverage: Float
}

type GamePieceMeleeAttackAction {
  targetGamePiece: GamePiece!
  resolved: Boolean!
  resolvedAttacks: [ResolvedAttack!]
  totalDamageDealt: Int
  totalDamageAverage: Float
}

type ResolvedAttack {
  hitRoll: RollResult!
  woundRoll: RollResult!
  saveRoll: RollResult!
  damageDealt: Int!
  averageDamage: Float!
}

type RollResult {
  roll: Int!
  rollNeeded: Int!
  success: Boolean!
}

input CreateGameInput {
  arenaWidth: Int!
  arenaHeight: Int!
  players: [CreateGamePlayerInput!]!
}

input CreateGamePlayerInput {
  minaPublicKey: String!
  name: String!
  playerNumber: Int!
}

input CreateGamePiecesInput {
  minaPublicKey: String!
  gameId: ID!
  gamePieces: [CreateGamePieceInput!]!
}

input CreateGamePieceInput {
  playerUnitId: ID
  createPlayerUnit: CreatePlayerUnitInput
}

input CreatePlayerUnitInput {
  unitId: Int!
  name: String!
}

input StartGameInput {
  gameId: ID!
}

input CreateGamePieceActionsInput {
  minaPublicKey: String!
  gameId: ID!
  actions: [CreateGamePieceActionInput!]!
}

input CreateGamePieceActionInput {
  actionType: GamePieceActionType!
  gamePieceId: ID!
  moveInput: GamePieceMoveActionInput
  rangedAttackInput: GamePieceRangedAttackActionInput
  meleeAttackInput: GamePieceMeleeAttackActionInput
}

input GamePieceMoveActionInput {
  moveFrom: GamePieceCoordinatesInput!
  moveTo: GamePieceCoordinatesInput!
}

input GamePieceCoordinatesInput {
  x: Int!
  y: Int!
}

input GamePieceRangedAttackActionInput {
  targetGamePieceId: Int!
  diceRoll: DiceRollInput!
}

input GamePieceMeleeAttackActionInput {
  targetGamePieceId: Int!
  diceRoll: DiceRollInput!
}

input DiceRollInput {
  publicKey: PublicKeyGroupInput!
  cipherText: String!
  signature: SignatureInput!
}

input PublicKeyGroupInput {
  x: String!
  y: String!
}

input SignatureInput {
  r: String!
  s: String!
}

input SubmitGamePhaseInput {
  minaPublicKey: String!
  gamePhaseId: ID!
}
